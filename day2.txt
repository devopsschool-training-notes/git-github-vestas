==================================
Day Agenda
==================================
https://www.devopsschool.com/courses/git/git-advance-training.html
=======================================================================

What is Branch?
===============
- is a seprarte line of dev for many reason such as..
- is a pointer to a commit id.
- this is maintained in ref table.
- Without a branch - you should not word.
- master is a default branch
==============
Struture of branch
	- main ===> Daily release cycle == master
	- bug1.0 / bug2.0
	- feaure1/feautre2
	- teamA/teamb
==================
GIT - branching is FREE
---------------------------
How to create a branch?
=================================
501  git log --oneline
  502  git branch -a
  503  clear
  504  git branch fea1
  505  git branch -a
  506  git checkout fea1
  507  git branch -a
  508  clear
  509  git log --oneline
  510  clear
  511  touch fea1.txt;git add .;git commit -m"ading fea1"
  512  git log --oneline
  513  git checkout master
  514  clear
  515  git log --oneline
  516  git checkout fea1
  517  git log --oneline
  518  clear
  519  git log --oneline
  520  ls
  521  git checkout master
  522  ls
  523  clear
  524  git checkout fea1
  525  ls
  526  more fea1.txt
  527  cat fea1.txt
  528  clear
  529  ls
  530  touch fea2.txt;git add .;git commit -m"ading fea2"
  531  git log --oneline
  532  clear
  533  git diff master
---------------------------------------------------
Types of Branches
===================================================
Local Branch	- Read & Write - You create - You work
Remote branch	- Read Only - Git create - git uses for getting a changes from Remote repo.
Temp Branch
		- when you checkout remote branch OR any commit id.

Local Repo
	Local Branch
	Remote branch
	Temp Branch
Remote Repo

==============================
==============================
PULL === FeTCH + Merge
=====================================================================
Merging Strategy?
============================
- Merging can happen between any 2 branch
	- Fast Forward Merge	

 579  git log --oneline
  580  git checkout fea1
  581  clear
  582  git log --oneline
  583  ls
  584  clear
  585  touch fea3.txt;git add .;git commit -m"adding fea3"
  586  git log --oneline
  587  clear
  588  git merge master
  589  git checkout master
  590  clear
  591  git log --oneline
  592  git diff fea1
  593  clear
  594  git merge fea1
  595  git log --oneline
  596  git branch -a
  597  history



	- recursive merge
 599  git log --oneline
  600  clear
  601  ls
  602  touch 1.txt;git add .;git commit -m"adding 1"
  603  git checkout fea1
  604  touch 2.txt;git add .;git commit -m"adding 2"
  605  clear
  606  touch 3.txt;git add .;git commit -m"adding 3"
  607  git checkout master
  608  touch 4.txt;git add .;git commit -m"adding 4"
  609  touch 5.txt;git add .;git commit -m"adding 5"
  610  clear
  611  git checkout fea1
  612  touch 6.txt;git add .;git commit -m"adding 6"
  613  clear
  614  git log --oneline
  615  git checkout master
  616  clear
  617  git log --oneline
  618  clear
  619  git merge fea1
  620  git log --oneline
  621  clear

	- Cherry Picking

 625  git checkout fea1
  626  clear
  627  git log --oneline
  628  touch 7.txt;git add .;git commit -m"adding 7"
  629  clear
  630  touch 8.txt;git add .;git commit -m"adding 8"
  631  touch 9.txt;git add .;git commit -m"adding 9"
  632  touch 10.txt;git add .;git commit -m"adding 10"
  633  clear
  634  git log --oneline
  635  git diff master
  636  git checkout master
  637  clear
  638  git log --oneline
  639  clear
  640  git checkout fea1
  641  git log --oneline
  642  clear
  643  git checkout master
  644  git cherry-pick 741483a
  645  ls
  646  git log --oneline


What is HEAD?
=======================================
Tip of the Current Branch.
	Never said TOP or MOst Latest Commit of that branch.

 567  clear
  568  git log --oneline
  569  git show HEAD
  570  clear
  571  git show HEAD~1
  572  git log --oneline
  573  git show HEAD~2
  574  clear
  575  ls
  576  history
==============================================================================
Pull = Fetch  + Merge - Demo
---------------------------------




How to resolve Conflict?
-----------------------------
 711  git checkout master
  712  ls
  713  vi 7.txt
  714  git add .;git commit -m
  715  'clear
  716  clear
  717  git add .;git commit -m"ading"
  718  git checkout fea1
  719  vi 7.txt
  720  git add .;git commit -m"ading"
  721  clear
  722  git checkout master
  723  git merge fea1
  724  git status
  725  vi 7.txt
  726  git status
  727  clear
  728  git add .
  729  clear
  730  git add .;git commit -m"ading"
  731  git status
  732  git merge fea1
  733  history


UnDoing in Git?
===================
- Getting rid of fils from workign dir?
 735  git status
  736  touch clean.txt clean1.txt
  737  ls
  738  git status
  739  clear
  740  ls
  741  git status
  742  git clean -f -d
  743  git status
  744  clear
  745  touch clean.txt clean1.txt
  746  git status
  747  git clean -f -d clean.txt
  748  git status
  749  history


- moving a changes from staging to working dir?
 748  git status
  749  history
  750  clear
  751  ls
  752  git status
  753  touch reset.txt
  754  clear
  755  git status
  756  git add .
  757  git status
  758  git reset
  759  clear
  760  git status
  761  git clean -f -d
  762  history


- How to revert?
 764  git log --oneline
  765  clear
  766  touch good.txt;git add .;git commit -m"adding good commit"
  767  touch bad.txt;git add .;git commit -m"adding bad commit"
  768  clear
  769  git log --oneline
  770  clear
  771  git log --oneline -n 5
  772  git diff b906836 b3fb528
  773  git revert b906836
  774  clear
  775  git log --oneline -n 5
  776  git diff b3fb528 c0f291e
  777  git diff b3fb528 b906836
  778  history

===============================================
Git config
https://www.devopsschool.com/blog/bash-aliases-for-git/
https://github.com/GitAlias/gitalias

  798  clear
  799  ls
  800  git alias.fm "log --oneline -n 5"



Ignoring Files
======================
  851  vi .gitignore
  852  git status
  853  vi .gitignore
  854  clear
  855  vi .gitignore
  856  git status
  857  vi .gitignore
  858  git status
  859  clear

===================
Stashing Changes

 902  git staus
  903  git status
  904  git stash list
  905  git stash apply stash@{0}
  906  git status
  907  git stash apply stash@{1}
  908  clear
  909  git status
  910  git stash list
  911  ls
  912  git add .
  913  git commit -m"adding"
  914  git list
  915  git status
  916  clear
  917  git stash list
  918  git stash -h
  919  git stash drop
  920  clear
  921  git stash list
  922  git stash drop
  923  git stash list
  924  history



Tagging
===================
- branching --> Commit ID - TO WORK a LINE OF CODE
- tagging --> Commit ID - TO use for Label a milestone

925  clear
  926  git tag --list
  927  git tag
  928  git tag --list
  929  git tag relase1.0
  930  git tag --list
  931  git log --oneline -n2
  932  git tag -h
  933  clear
  934  git log --oneline -n2
  935  git tag -a c913072 -m"fir rel3.0"
  936  git tag --list
  937  git show c913072
  938  git tag --list
  939  git show relase1.0
  940  clear
  941  git tag --li
  942  git checkout relase1.0
  943  clear
  944  ls
  945  git checout master
  946  clear
  947  git checkout master
  948  clear
  949  git branch
  950  git push origin fea1
  951  clear
  952  git push origin fea1.1
  953  git tag --list
  954  git push origin relase1.0
  955  clear
  956  git tag -h
  957  clear
  958  history


Git Rebase
GIT RESET Complete
SourceTree - GUI TOOL








Qs
what is submodule



